# -*- mode: ruby -*-
# vi:set ft=ruby sw=2 ts=2 sts=2:

# Variables
VAGRANTFILE_API_VERSION = "2"
ansible_playbook = "deployk8s.yml"
ansible_inventory_path = "hosts"
cfg_file = "vagrant.yml"

require 'yaml'

if !File.exists?(File.join(File.dirname(__FILE__), cfg_file))
  puts "The vagrant file is missing"
  abort
end

vars = YAML.load_file(File.join(File.dirname(__FILE__), cfg_file))
servers = vars['servers']
if !servers || servers.empty?
  puts "Servers are not defined in " + cfg_file
  abort
end

# Install disksize plugin
unless Vagrant.has_plugin?("vagrant-disksize")
  raise Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Defaults
  config.vm.box_check_update = false
  config.vm.synced_folder ".", "/vagrant", disabled: true
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  # Create inventory file
  if File.dirname(ansible_inventory_path) != '.'
    Dir.mkdir(File.dirname(ansible_inventory_path)) unless Dir.exist?(File.dirname(ansible_inventory_path))
  end
 
  File.open(ansible_inventory_path, 'w') do |f|
    servers.each do |cfg|
      if cfg['ipaddress'] != 'dhcp'
        f.write "#{cfg['hostname']}   ansible_host=#{cfg['ipaddress']} "
        f.write "ansible_user=#{vars['ansible_user']}   ansible_ssh_private_key_file=#{vars['ssh_key_file']}\n"
      else
        f.write "DHCP is not currently supported\n"
      end
    end
    f.write "\n"
    f.write "[all]\n"
    servers.each do |cfg|
      f.write "#{cfg['hostname']}\n"
    end
    f.write "\n"
    servers.each do |cfg|
      f.write "[#{cfg['group']}]\n"
      f.write "#{cfg['hostname']}\n"
      f.write "\n"
    end
  end

  # Loop over the nodes to bring it up 
  servers.each_with_index do |server, index|
    box_img = server['box_image'] ? server['box_image'] : vars['box_image']

    config.vm.define server['hostname'] do |conf|
      conf.vm.box = box_img.to_s
      conf.vm.hostname = server['hostname']
      #config.disksize.size = '50GB'

      #network
      net_cfg = {}
      if server['ipaddress'] != 'dhcp'
        net_cfg[:ip] = server['ipaddress']
        net_cfg[:netmask] = server['netmask'] || '255.255.255.0'
      else
        net_cfg[:type] = 'dhcp'
      end
      conf.vm.network "public_network", bridge: "en0: Wi-Fi (AirPort)", ip: server['ipaddress']
      conf.vm.network "forwarded_port", guest: 22, host: "#{2810 + index}"

      #compute
      cpu = server['cpu'] ? server['cpu'] : 1;
      ram = server['ram'] ? server['ram'] : 512;
      conf.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--cpus", cpu.to_s]
        vb.customize ["modifyvm", :id, "--memory", ram.to_s]
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      end

      #ssh keys
      conf.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", vars['ssh_key_file']]
      conf.ssh.insert_key = false
      conf.vm.provision "file", source: vars['ssh_key_file'] + ".pub", destination: "~/.ssh/authorized_keys"
      #update hosts file
      conf.vm.provision "setup-hosts", :type => "shell", :path => "scripts/setup-hosts.sh" do |s|
        s.args = ["eth1"]
      end

    #CONF LOOP
    end
  #SERVERS LOOP
  end
  #ANSIBLE DEPLOYMENT

#END
end
